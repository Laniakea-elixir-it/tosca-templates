tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  #- indigo_custom_types: https://raw.githubusercontent.com/mtangaro/tosca-types/laniakea-galaxy/custom_types.yaml
  - indigo_custom_types: https://baltig.infn.it/mtangaro/tosca-types/-/raw/htcondor_laniakea/tosca_types/applications/laniakea_types.yaml

description: >
  Deploy Galaxy on a single Virtual Machine using Ansible roles.
  The basic configuration includes RockyLinux 9, the selected Galaxy flavour, companion software and reference data.
  Configure, click on the "Submit" button, wait for the confirmation e-mail(s) and log in to your new Galaxy instance.
  If after some hours you do not receive any e-mail please be sure to check your SPAM BOX.

topology_template:

  inputs:

    # Instance config
    users:
      type: list
      description: list of users to create on the VM
      entry_schema:
        type: tosca.datatypes.indigo.User
      default: []
      required: false

    num_cpus:
      type: integer
      description: Number of virtual cpus for the VM
      default: 1

    mem_size:
      type: scalar-unit.size
      description: Amount of memory for the VM
      default: 2 GB

    os_distribution:
      type: string
      default: rockylinux
      description: Operating System distro
      constraints:
         - valid_values: [ "ubuntu", "rockylinux" ]

    os_version:
      type: version
      default: 9.3
      description: Operating System distribution version
      constraints:
         - valid_values: [ 22.04, 9.3 ]

    storage_size:
      type: string
      description: storage memory required for the instance
      default: 10 GB

    # Galaxy config
    admin_email:
      type: string
      description: email of the admin user
      default: admin@admin.com
    admin_api_key:
      type: string
      description: api key admin user.
      default: random
    admin_password:
      type: string
      description: password of the admin user
      default: galaxy_admin_password
    version:
      type: string
      description: galaxy version to install
      default: master
    instance_description:
      type: string
      description: galaxy instance description
      default: "INDIGO Galaxy test"
    export_dir:
      type: string
      description: path to store galaxy data
      default: /export
    enable_interactive_tools:
      type: boolean
      description: Enable Galaxy Interactive Tools (install docker)
      default: true
      required: false

    flavor:
      type: string
      description: Galaxy flavor for tools installation
      default: "galaxy-minimal"

  node_templates:

    #galaxy:
    #  type: tosca.nodes.indigo.GalaxyPortal
    #  properties:
    #    admin_email: { get_input: admin_email }
    #    admin_api_key: { get_input: admin_api_key }
    #    version: { get_input: version }
    #    instance_description: { get_input: instance_description }
    #    export_dir: { get_input: export_dir }
    #    enable_interactive_tools: { get_input: enable_interactive_tools }
    #    flavor: { get_input: flavor }
    #  requirements:
    #    - host: galaxy_server

    galaxy_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            private_ip: false
            ports:
              http_port:
                protocol: tcp
                source: 80
        host:
          properties:
            num_cpus: { get_input: num_cpus }
            mem_size: { get_input: mem_size }
        os:
          properties:
            distribution: { get_input: os_distribution }
            version: { get_input: os_version }
      requirements:
        - local_storage:
            node: my_block_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { get_input: export_dir }
                device: hdb

    my_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: storage_size }

  outputs:
    endpoint:
      value: { concat: [ 'http://', get_attribute: [ galaxy_server, public_address, 0 ], '/galaxy' ] }
      #value: { concat: [ 'http://', get_attribute: [ galaxy_server, public_address, 0 ] ] }
    node_ip:
      value: { get_attribute: [ galaxy_server, public_address, 0 ] }
    os_users:
      value: { get_property: [ galaxy_server, os_users, 0 ] }
