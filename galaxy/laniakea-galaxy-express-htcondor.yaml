tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  #- indigo_custom_types: https://raw.githubusercontent.com/mtangaro/tosca-types/laniakea-galaxy/custom_types.yaml
  - indigo_custom_types: https://baltig.infn.it/mtangaro/tosca-types/-/raw/htcondor_laniakea/tosca_types/applications/laniakea_types.yaml

description: >
  Deploy Galaxy on a single Virtual Machine from a VM image (FAST).
  The basic configuration includes RockyLinux 9, the selected Galaxy flavour, companion software and reference data.
  Configure, click on the "Submit" button, wait for the confirmation e-mail(s) and log in to your new Galaxy instance.
  If after some hours you do not receive any e-mail please be sure to check your SPAM BOX.

metadata:
  display_name: Galaxy Cluster

topology_template:
  inputs:
    users:
      type: list
      description: list of users to create on the VM
      entry_schema:
        type: tosca.datatypes.indigo.User
      default: []
      required: false

    # Cluster parameters.
    # Front end parameters
    fe_cpus:
      type: integer
      description: Number of virtual cpus for the front-end
      default: 1
    fe_mem:
      type: scalar-unit.size
      description: Amount of memory for the front-end
      default: 2 GB
    exec_num:
      type: integer
      description: Number of WNs in the cluster
      default: 2
      required: yes
    exec_cpus:
      type: integer
      description: Number of virtual cpus for the front-end
      default: 1
    exec_mem:
      type: scalar-unit.size
      description: Amount of memory for the front-end
      default: 2 GB

    htcondor_password:
      type: string
      description: HTCondor password. Must be the same for CM, nodes and submit.
      default: "changeit"
      required: true

    ## Vault section for admin_password
    retrieve_htcondor_password_from_vault:
      type: boolean
      description: Enable Vault Password workflow
      default: false
      required: false
    htc_vault_token:
      type: map
      description: Hashicorp endpoint description
      entry_schema:
        type: tosca.datatypes.indigo.VaultToken
      default: {}
      required: false
    vault_secrets_path:
      type: string
      description: Secret path
      default: "sub/dep.uuid/user_secrets"
      required: false
    ## End Vault section for admin_password

    storage_size:
      type: scalar-unit.size
      description: Amount of storage for the VM
      default: 10 GB
      constraints:
      - valid_values: [ 10 GB, 50 GB, 100 GB ]
    export_dir:
      type: string
      description: path to store galaxy data
      default: /export

    # Storage encryption
    storage_encryption:
      type: boolean
      description: Enable storage encryption using Vault to store secrets and LUKS to encrypt
      default: False
      required: true
    vault_encryption_token:
      type: map
      description: Vault write token for storage encryption
      entry_schema:
        type: tosca.datatypes.indigo.VaultToken
      default: {}
      required: false
    vault_encryption_path:
      type: string
      description: Secret path for encryption passphrase
      default: "sub/dep.uuid/storage_encryption"
      required: false
    vault_encryption_key:
      type: string
      description: Secret key for encryption passphrase
      default: 'storage_encryption_key'
      required: false

    # Galaxy
    admin_email:
      type: string
      description: email of the admin user
      default: admin@admin.com
    admin_api_key:
      type: string
      description: api key admin user.
      default: random
    admin_password:
      type: string
      description: password of the admin user
      default: galaxy_admin_password
    ## Vault section for admin_password
    retrieve_galaxy_admin_password_from_vault:
      type: boolean
      description: Enable Vault Password workflow
      default: false
      required: false
    galaxy_vault_token:
      type: map
      description: Hashicorp endpoint description
      entry_schema:
        type: tosca.datatypes.indigo.VaultToken
      default: {}
      required: false
       ### Vault secrets path is defined at htcondor level
       ###vault_secrets_path:
       ###  type: string
       ###  description: Secret path
       ###  default: "sub/dep.uuid/user_secrets"
       ###  required: false
    ## End Vault section for admin_password
    version:
      type: string
      description: galaxy version to install
      default: master
    instance_description:
      type: string
      description: galaxy instance description
      default: "INDIGO Galaxy test"
    export_dir:
      type: string
      description: path to store galaxy data
      default: /export
    enable_interactive_tools:
      type: boolean
      description: Enable Galaxy Interactive Tools (install docker)
      default: true
      required: false

    flavor:
      type: string
      description: Galaxy flavor for tools installation
      default: "galaxy-minimal"

  node_templates:

    #__________________________________
    # galaxy + encryption + nfs + condor_cm

    luks_encryption:
      type: tosca.nodes.indigo.LuksEncryption
      properties:
        storage_encryption: { get_input: storage_encryption }
        vault_encryption_token: { get_input: vault_encryption_token }
        vault_encryption_path:  { get_input: vault_encryption_path }
        vault_encryption_key:  { get_input: vault_encryption_key }
      requirements:
        - host: galaxy_server

    nfs_server_config:
      type: tosca.nodes.Laniakea.NFS
      properties:
        nfs_mode: server
        nfs_exports:
          - path: { get_input: export_dir }
            export: "vnode-*.localdomain(rw,async,no_root_squash,no_subtree_check,insecure)"
          - path: /home/galaxy
            export: "vnode-*.localdomain(rw,async,no_root_squash,no_subtree_check,insecure)"
      requirements:
        - host: galaxy_server
        - dependency: luks_encryption

    condor_cm_config:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Condor.Vault
      properties:
        htcondor_server: { get_attribute: [ galaxy_server, private_address, 0 ] }
        htcondor_ip_range: { get_attribute: [ galaxy_server, private_address, 0 ] }
        htcondor_version: 24.x
        htcondor_domain: laniakea
        htcondor_password: { get_input: htcondor_password }
        htcondor_daemons:
         - COLLECTOR
         - MASTER
         - NEGOTIATOR
         - SCHEDD
        bootstrap_user: #[{"os_user_name": "galaxy", "os_user_guid": "5001"}]
          - os_user_name: galaxy
            os_user_guid: 5001
        retrieve_passphrase_from_vault: { get_input: retrieve_htcondor_password_from_vault }
        vault_token: { get_input: htc_vault_token }
        vault_secrets:
          path: { get_input: vault_secrets_path }
          data:
            htcondor_password: { get_input: htcondor_password }
          action: "read"
      requirements:
        - host: galaxy_server
        - dependency: nfs_server_config

    galaxy:
      type: tosca.nodes.indigo.GalaxyPortalExpress
      properties:
        admin_email: { get_input: admin_email }
        admin_api_key: { get_input: admin_api_key }
        retrieve_passphrase_from_vault: { get_input: retrieve_galaxy_admin_password_from_vault }
        vault_token: { get_input: galaxy_vault_token }
        vault_secrets:
          path: { get_input: vault_secrets_path }
          data:
            admin_password: { get_input: admin_password }
          action: "read"
        version: { get_input: version }
        galaxy_runner: condor
        instance_description: { get_input: instance_description }
        export_dir: { get_input: export_dir }
        enable_interactive_tools: { get_input: enable_interactive_tools }
        flavor: { get_input: flavor }
      requirements:
        - host: galaxy_server
        - dependency: condor_cm_config

    laniakea_utils:
      type: tosca.nodes.Laniakea.Utils
      properties:
        storage_encryption: { get_input: storage_encryption }
      requirements:
        - host: galaxy_server
        - dependency: galaxy

    galaxy_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        endpoint:
          properties:
            dns_name: galaxyserver
            network_name: PUBLIC
              #private_ip: false
            ports:
              http_port:
                protocol: tcp
                source: 80
              luksctl_port:
                protocol: tcp
                source: 5000
              laniakea_utils_port:
                protocol: tcp
                source: 5001
        # Host container properties
        host:
         properties:
           #iinstance_type: { get_input: instance_flavor }
           num_cpus: { get_input: fe_cpus }
           mem_size: { get_input: fe_mem }
        # Guest Operating System properties
        os:
          properties:
            image: { get_input: version }
            #version: v1.0.0
      requirements:
        # contextually this can only be a relationship type
        - local_storage:
            # capability is provided by Compute Node Type
            node: my_block_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { get_input: export_dir }
                device: hdb

    my_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: storage_size }

    #__________________________________
    # condor executors

    nfs_client_config:
      type: tosca.nodes.Laniakea.NFS
      properties:
        nfs_mode: client
        nfs_client_imports:
          - local: { get_input: export_dir }
            remote: { get_input: export_dir }
            server_host: { get_attribute: [ galaxy_server, private_address, 0 ] }
            options: "rw,hard,intr,nosuid,quota"
          - local: /home/galaxy
            remote: /home/galaxy
            server_host: { get_attribute: [ galaxy_server, private_address, 0 ] }
            options: "rw,hard,intr,nosuid,quota"
        mount_mode: "autofs"
        autofs_maps: #{ "galaxy": { "path": "/-", "options": "nfsvers=3" } }
          galaxy:
            path: /-
            options: "nfsvers=3"
      requirements:
        - host: htcondor_exec_server
        - dependency: nfs_server_config

    cvmfs_client_config:
      type: tosca.nodes.Laniakea.CVMFSClient
      requirements:
        - host: htcondor_exec_server

    condor_exec_config:
      type: tosca.nodes.indigo.LRMS.WorkerNode.Condor.Vault
      properties:
        htcondor_server: { get_attribute: [ galaxy_server, private_address, 0 ] }
        htcondor_version: 24.x
        htcondor_domain: laniakea
        htcondor_password: { get_input: htcondor_password }
        htcondor_daemons:
         - MASTER
         - SCHEDD
         - STARTD
        bootstrap_user: #[{"os_user_name": "galaxy", "os_user_guid": "5001"}]
          - os_user_name: galaxy
            os_user_guid: 5001
        retrieve_passphrase_from_vault: { get_input: retrieve_galaxy_admin_password_from_vault }
        vault_token: { get_input: htc_vault_token }
        vault_secrets:
          path: { get_input: vault_secrets_path }
          data:
            htcondor_password: { get_input: htcondor_password }
          action: "read"
      requirements:
        - host: htcondor_exec_server
        - dependency: nfs_client_config

    htcondor_exec_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        scalable:
          properties:
            count: { get_input: exec_num }
        host:
          properties:
            #instance_type: { get_input: exec_flavor }
            num_cpus: { get_input: exec_cpus }
            mem_size: { get_input: exec_mem }
        os:
          properties:
            image: rockylinux.9.5-laniakea-dev_v1.0.0
            #distribution: centos
            #version: 7

  outputs:
    endpoint:
      value: { concat: [ 'http://', get_attribute: [ galaxy_server, public_address, 0 ], '/galaxy' ] }
      #value: { concat: [ 'http://', get_attribute: [ galaxy_server, public_address, 0 ] ] }
    node_ip:
      value: { get_attribute: [ galaxy_server, public_address, 0 ] }
    os_users:
      value: { get_property: [ galaxy_server, os_users, 0 ] }
