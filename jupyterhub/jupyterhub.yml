tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/mtangaro/tosca-types/laniakea-galaxy/custom_types.yaml

description: >
  Deploy JupyterHub on a single Virtual Machine.

topology_template:
  inputs:

    # Instance config
    users:
      type: list
      description: list of users to create on the VM
      entry_schema:
        type: tosca.datatypes.indigo.User
      default: []
      required: false

    instance_flavor:
      type: string
      description: instance flavor (num_cpu, memory, disk)
      default: large

    storage_size:
      type: string
      description: storage memory required for the instance
      default: 10 GB      

    export_dir:
      type: string
      description: path to store jupyterhub data
      default: /export

    ## Vault section for admin_password
    admin_password:
      type: string
      description: password of the admin user
      default: rstudio_admin_password
    retrieve_passphrase_from_vault:
      type: boolean
      description: Enable Vault Password workflow
      default: false
      required: false
    vault_token:
      type: tosca.datatypes.indigo.VaultToken
      description: Hashicorp endpoint description
      default: {}
      required: false
    vault_secrets_path:
      type: string
      description: Secret path
      default: "sub/dep.uuid/user_secrets"
      required: false
    vault_secrets_action:
      type: string
      description: Write or read secret
      default: read
      required: false
      constraints:
        - valid_values: ['read','write']

  node_templates:

    jupyterhub:
      type: tosca.nodes.indigo.JupyterHubPortal
      properties:
        retrieve_passphrase_from_vault: { get_input: retrieve_passphrase_from_vault }
        vault_token: { get_input: vault_token }
        vault_secrets:
          path: { get_input: vault_secrets_path }
          data:
            admin_password: { get_input: admin_password }
          action: { get_input: vault_secrets_action }
        export_dir: { get_input: export_dir }
      requirements:
        - lrms: local_lrms

    # type to describe a Galaxy not using any LRMS but using the local system
    local_lrms:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Local
      requirements:
        - host: jupyterhub_server
 
    jupyterhub_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            private_ip: false
            ports:
              jupyterhub_port:
                protocol: tcp
                source: 80
        # Host container properties
        host:
         properties:
           instance_type: { get_input: instance_flavor }
        # Guest Operating System properties
        os:
          properties:
            image: ubuntu-20.04
            #image: centos-7-2003
            #distribution: { get_input: os_distribution }
            #version: { get_input: os_version }
      requirements:
        # contextually this can only be a relationship type
        - local_storage:
            # capability is provided by Compute Node Type
            node: my_block_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { get_input: export_dir }
                device: hdb

    my_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: storage_size }

  outputs:
    endpoint:
       value: { concat: [ 'http://', get_attribute: [ jupyterhub_server, public_address, 0 ], '/jupyter' ] }
    node_ip:
      value: { get_attribute: [ jupyterhub_server, public_address, 0 ] }
    os_users:
      value: { get_property: [ jupyterhub_server, os_users, 0 ] }
