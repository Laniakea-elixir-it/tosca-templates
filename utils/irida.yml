tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/mtangaro/tosca-types/laniakea-galaxy/custom_types.yaml

description: >
  Deploy Irida with a Galaxy Docker Container for job submission.

topology_template:
  inputs:

    users:
      type: list
      description: list of users to create on the VM
      entry_schema:
        type: tosca.datatypes.indigo.User
      default: []
      required: false

    # Irida parameters.
    # CPUs and memory should not be changed. Storage should be changed by the user
    fe_cpus:
      type: integer
      description: Numer of CPUs for the front-end node
      default: 2
      required: yes
    fe_mem:
      type: scalar-unit.size
      description: Amount of Memory for the front-end node
      default: 4 GB
      required: yes
    storage_size:
      type: scalar-unit.size
      description: Amount of storage for the VM
      default: 10 GB
      constraints:
      - valid_values: [ 10 GB, 50 GB, 100 GB ]
    export_dir:
      type: string
      description: path to store galaxy data
      default: /export

    # Galaxy compute node parameters.
    galaxy_cpus:
      type: integer
      description: Numer of CPUs for the WNs
      default: 1
      required: yes
    galaxy_mem:
      type: scalar-unit.size
      description: Amount of Memory for the WNs
      default: 1 GB
      required: yes

  node_templates:

  # step:
  # 1. irida and galaxy_wn server
  # 2. nfs server config on irida
  # 3. lrms config on irida
  # 4. nfs client config on galaxy
  # 5. galaxy_wn config
  # 6. irida config.
  # The galaxy storage is mounted on /export/galaxy through tosca template storage block.
  # The irida nfs mountpoint is mounted on /export/irida using the custom type LaniakeaNFS
  
    nfs_server:
      type: tosca.nodes.indigo.LaniakeaNFS
      properties:
        nfs_node: server
        nfs_server_export_dir: /export
        nfs_server_ip: { get_attribute: [ irida_server, public_address, 0 ] }
        client_mountpoint: /export/irida
      requirements:
        - host: irida_server
          
    irida:
      type: tosca.nodes.indigo.IridaPortal
      properties:
        type_of_node: irida
        export_dir: /export
        irida_server_ip: { get_attribute: [ irida_server, public_address, 0 ] } # This is the irida server public ip, for irida configuration
        galaxy_wn_ip: { get_attribute: [ galaxy_wn, public_address, 0 ] } # This is galaxy wn private ip.
      requirements:
        - lrms: local_lrms
        - dependency: galaxy

    # type to describe a Galaxy not using any LRMS but using the local system
    local_lrms:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Local
      requirements:
        - host: irida_server
        - dependency: nfs_server

    irida_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        endpoint:
          properties:
            dns_name: iridaserver
            network_name: PUBLIC
            private_ip: false
            ports:
              http_port:
                protocol: tcp
                source: 80
        host:
          properties:
            num_cpus: { get_input: fe_cpus }
            mem_size: { get_input: fe_mem }
        os:
          properties:
            distribution: ubuntu
            version: 18.04
      requirements:
        # contextually this can only be a relationship type
        - local_storage:
            # capability is provided by Compute Node Type
            node: my_block_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { get_input: export_dir }
                device: hdb

    my_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: storage_size }

    nfs_client:
      type: tosca.nodes.indigo.LaniakeaNFS
      properties:
        nfs_node: client
        nfs_server_export_dir: /export
        nfs_server_ip: { get_attribute: [ irida_server, public_address, 0 ] }
        client_mountpoint: /export/irida
      requirements:
        - host: galaxy_wn
        - dependency: nfs_server

    galaxy:
      type: tosca.nodes.indigo.IridaPortal
      properties:
        type_of_node: galaxy
        export_dir: /export
        irida_server_ip: { get_attribute: [ irida_server, public_address, 0 ] } # this is the ip for the nfs configuration (the irida servere private ip). 
        galaxy_wn_ip: { get_attribute: [ galaxy_wn, public_address, 0 ] }  # this is the ip for galaxy configuration (the wn ip)
      requirements:
        - host: galaxy_wn
        - dependency: nfs_client

    galaxy_wn:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            private_ip: false
            ports:
              http_port:
                protocol: tcp
                source: 48888
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: { get_input: galaxy_cpus }
            mem_size: { get_input: galaxy_mem }
        os:
          properties:
            distribution: ubuntu
            version: 20.04
      requirements:
        # contextually this can only be a relationship type
        - local_storage:
            # capability is provided by Compute Node Type
            node: galaxy_block_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { concat: [ get_input: export_dir, '/galaxy' ] }
                device: hdb
  
    galaxy_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: 50 GB

  outputs:
    endpoint:
      value: { concat: [ 'http://', get_attribute: [ irida_server, public_address, 0 ], '/irida' ] }
    node_ip:
      value: { get_attribute: [ irida_server, public_address, 0 ] }
    galaxy_ip:
      value: { get_attribute: [ irida_server, public_address, 0 ] }
    os_users:
      value: { get_property: [ irida_server, os_users, 0 ] }
